/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Analizador.Analizador_Nivel;
import Analizador.Analizador_Piezas;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import Figuras.FiguraJ;
import Figuras.FiguraL;
import Figuras.FiguraT;
import Figuras.figul;
import Figuras.figuraO;
import Figuras.figuras;
import Figuras.figuraz;
import Figuras.pieza;

/**
 *
 * @author Alex
 */
public class Inicio extends javax.swing.JFrame {

    private String[] cadenalvl;
    private String[] cadenapzs;
    private Analizador.Analizador_Nivel AnalizadorLVL = new Analizador_Nivel();
    private Analizador.Analizador_Piezas AnalizadorPZS = new Analizador_Piezas();
    private JLabel[][] l = new JLabel[4][4];
    private JLabel[][] tablero;
    private javax.swing.border.Border border = BorderFactory.createLineBorder(Color.BLACK, 1);
    private int fig = 0;
    private boolean posicion = false; //false = vertical // true = horizontal
    private int index = 0, indexpieza = 0;
    private int m = 0, n = 0;
    private String tab = "", nombre = "";
    private String fi, orientacion;

    public Inicio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextNiveles = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextPiezas = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PanelJuego = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        TextNiveles.setColumns(20);
        TextNiveles.setRows(5);
        jScrollPane1.setViewportView(TextNiveles);

        TextPiezas.setColumns(20);
        TextPiezas.setRows(5);
        jScrollPane2.setViewportView(TextPiezas);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Niveles");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Piezas");

        javax.swing.GroupLayout PanelJuegoLayout = new javax.swing.GroupLayout(PanelJuego);
        PanelJuego.setLayout(PanelJuegoLayout);
        PanelJuegoLayout.setHorizontalGroup(
            PanelJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
        );
        PanelJuegoLayout.setVerticalGroup(
            PanelJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );

        jButton1.setText("Rotar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Bajar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("<--");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("-->");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("sig");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jButton6.setText("obtener pieza");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(PanelJuego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel2)
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(PanelJuego, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Cargar Niveles");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem4.setText("Cargar Piezas");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Salir");
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Juego");

        jMenuItem2.setText("Analizar lvl.");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem6.setText("Analiza Pz.");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Iniciar");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ayuda");

        jMenuItem8.setText("Acerca De");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem3.setText("Manual");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem9.setText("Reportes");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("ReportesErrores");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void repintar(JLabel[][] pieza) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (pieza[i][j] != null) {
                    PanelJuego.remove(pieza[i][j]);
                    pieza[i][j].hide();
                    pieza[i][j] = null;
                }
            }
        }
    }

    private void obtener() {
        m = AnalizadorLVL.lst_nivel.get(index).getM();
        n = AnalizadorLVL.lst_nivel.get(index).getN();
        tab = AnalizadorLVL.lst_nivel.get(index).getTablero();
        nombre = AnalizadorLVL.lst_nivel.get(index).getNombre();
        jLabel3.setText(nombre);
        tablero = new JLabel[n][m];
    }

    private void obtenerPieza() {
        fi = AnalizadorPZS.lst_piezas.get(indexpieza).getFigura();
        orientacion = AnalizadorPZS.lst_piezas.get(indexpieza).getPosicion();
    }

    private void repintarT(JLabel[][] tablero) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                PanelJuego.remove(tablero[i][j]);
                tablero[i][j].hide();
                tablero[i][j] = null;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (tablero[i][j].getText().equals("*")) {
                    tablero[i][j].setBorder(border);
                    tablero[i][j].setBackground(Color.YELLOW);
                    tablero[i][j].setForeground(Color.YELLOW);
                    tablero[i][j].setOpaque(true);
                    tablero[i][j].setBounds(new Rectangle(i * 20, (j * 20) + 80, 20, 20));
                    PanelJuego.add(tablero[i][j]);
                } else {
                    tablero[i][j].setBackground(Color.white);
                    tablero[i][j].setForeground(Color.white);
                    tablero[i][j].setBorder(border);
                    tablero[i][j].setOpaque(true);
                    tablero[i][j].setBounds(new Rectangle(i * 20, (j * 20) + 80, 20, 20));
                    PanelJuego.add(tablero[i][j]);
                }
            }
        }
    }

    private void pintar(JLabel[][] tabl) {
        int ca = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                tablero[j][i] = new JLabel();
                tablero[j][i].setText(String.valueOf(tab.charAt(ca++)));
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (tabl[i][j].getText().equals("*")) {
                    tabl[i][j].setBorder(border);
                    tabl[i][j].setBackground(Color.YELLOW);
                    tabl[i][j].setForeground(Color.YELLOW);
                    tabl[i][j].setOpaque(true);
                    tabl[i][j].setBounds(new Rectangle(i * 20, (j * 20) + 80, 20, 20));
                    PanelJuego.add(tabl[i][j]);
                } else {
                    tabl[i][j].setBackground(Color.white);
                    tabl[i][j].setForeground(Color.white);
                    tabl[i][j].setBorder(border);
                    tabl[i][j].setOpaque(true);
                    tabl[i][j].setBounds(new Rectangle(i * 20, (j * 20) + 80, 20, 20));
                    PanelJuego.add(tabl[i][j]);
                }
            }
        }
    }


    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        JOptionPane.showMessageDialog(null, "Nombre: Rodolfo Alexander Avalos Soto \n Carnet: 201801210", "Informacion Estudiante", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser file = new JFileChooser("../Documents/");
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filtro = new FileNameExtensionFilter("Archivos TRS (*.trs)", "TRS");
        file.setFileFilter(filtro);
        file.showOpenDialog(this);
        File archivo = file.getSelectedFile();
        if (archivo != null) {
            try {
                FileReader archivos = new FileReader(archivo);
                BufferedReader contenido = new BufferedReader(archivos);
                String texto;
                while ((texto = contenido.readLine()) != null) {
                    TextNiveles.append(texto + '\n');
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Error al Cargar");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al Cargar");
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JFileChooser file = new JFileChooser("../Documents/");
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filtro = new FileNameExtensionFilter("Archivos PZS (*.pzs)", "PZS");
        file.setFileFilter(filtro);
        file.showOpenDialog(this);
        File archivo = file.getSelectedFile();
        if (archivo != null) {
            try {
                FileReader archivos = new FileReader(archivo);
                BufferedReader contenido = new BufferedReader(archivos);
                String texto;
                while ((texto = contenido.readLine()) != null) {
                    TextPiezas.append(texto + '\n');
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Error al Cargar");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al Cargar");
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        File archivo = new File("Manual.docx");
        try {
            Desktop.getDesktop().open(archivo);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error al Abrir");
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int linea = TextNiveles.getLineCount();
        cadenalvl = new String[linea];
        int inicio = 0;
        int fin = 0;
        for (int i = 0; i < linea; i++) {
            try {
                inicio = TextNiveles.getLineStartOffset(i);
                fin = TextNiveles.getLineEndOffset(i);
            } catch (BadLocationException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                cadenalvl[i] = TextNiveles.getText(inicio, fin - inicio);
            } catch (BadLocationException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        for (int pos = 0; pos < cadenalvl.length; pos++) {
            AnalizadorLVL.analizadorNivel(cadenalvl[pos], pos);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        int linea = TextPiezas.getLineCount();
        cadenapzs = new String[linea];
        int inicio = 0;
        int fin = 0;
        for (int i = 0; i < linea; i++) {
            try {
                inicio = TextPiezas.getLineStartOffset(i);
                fin = TextPiezas.getLineEndOffset(i);
            } catch (BadLocationException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                cadenapzs[i] = TextPiezas.getText(inicio, fin - inicio);
            } catch (BadLocationException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        for (int pos = 0; pos < cadenapzs.length; pos++) {
            AnalizadorPZS.analizadorPieza(cadenapzs[pos], pos);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        try {
            reporteTokenNivel();
            reporteTokenPieza();
            reporteTokenErrorNivel();
            reporteTokenErrorPieza();
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        rotar(l);
        mostrar(l);
        PanelJuego.repaint();
        if (this.posicion == false) {
            this.posicion = true;
        } else {
            this.posicion = false;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        obtener_pos(l, tablero);
        pintar(tablero);
        PanelJuego.repaint();
        obtenerPieza();
        verficar_pieza();
        if (indexpieza < AnalizadorPZS.lst_piezas.size() - 1) {
            indexpieza++;
        } else {
            indexpieza = 0;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        repintarT(tablero);
        obtener();
        pintar(tablero);
        this.repaint();
        if (index < AnalizadorLVL.lst_nivel.size() - 1) {
            index++;
        } else {
            JOptionPane.showMessageDialog(null, "Juego Terminado", "Informacion Estudiante", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        moverI(l);

        this.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        moverD(l);

        this.repaint();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        obtener();
        obtenerPieza();
        verficar_pieza();
        pintar(tablero);
        this.repaint();
        if (AnalizadorLVL.lst_error.size() <= 0) {

            if (index < AnalizadorLVL.lst_nivel.size() - 1) {
                index++;
            } else {
                JOptionPane.showMessageDialog(null, "Juego Terminado", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            }

            if (indexpieza < AnalizadorPZS.lst_piezas.size() - 1) {
                indexpieza++;
            } else {
                indexpieza = 0;
            }

        } else {
            JOptionPane.showMessageDialog(null, "Error de compilacion ", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        obtenerPieza();
        verficar_pieza();
        if (indexpieza < AnalizadorPZS.lst_piezas.size() - 1) {
            indexpieza++;
        } else {
            indexpieza = 0;
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        try {
            reporteTokenErrorNivel();
            reporteTokenErrorPieza();// TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed
    private void verficar_pieza() {
        switch (fi) {
            case "I":
                repintar(l);
                Figura_I(l);
                this.repaint();
                break;
            case "L":
                repintar(l);
                Figura_L(l);
                this.repaint();
                break;
            case "J":
                repintar(l);
                Figura_J(l);
                this.repaint();
                break;
            case "T":
                repintar(l);
                Figura_T(l);
                this.repaint();
                break;
            case "Z":
                repintar(l);
                Figura_z(l);
                this.repaint();
                break;
            case "O":
                repintar(l);
                Figura_O(l);
                this.repaint();
                break;
            case "S":
                repintar(l);
                Figura_s(l);
                this.repaint();
                break;
        }
        switch (orientacion) {
            case ">":
                rotar(l);
                mostrar(l);
                posicion = true;
                break;
            case "v":
                rotar(l);
                rotar(l);
                mostrar(l);
                this.posicion = false;
                break;
            case "<":
                rotar(l);
                rotar(l);
                rotar(l);
                mostrar(l);
                this.posicion = false;
                break;
            case "^":
                mostrar(l);
                break;

        }

    }

    private void obtener_pos(JLabel[][] aux, JLabel[][] tab) {
        ArrayList<Posicion> lst = new ArrayList<>();
        for (int k = 0; k < 4; k++) {
            for (int l = 0; l < 4; l++) {
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < m; j++) {
                        if (aux[k][l] != null) {
                            if (tab[i][j].getBounds().x == aux[k][l].getBounds().x && (tab[i][j].getBounds().y - 80) == aux[k][l].getBounds().y) {
                                if (tab[i][j].getText().equals("#")) {
                                    System.out.println(i + "," + j);
                                    lst.add(new Posicion(i, j));
                                }
                            }
                        }
                    }
                }
            }
        }
        pieza figura = null;
        switch (fig) {
            case 1:
                if (this.posicion) {//horizontal
                    figura = new FiguraL(lst.get(0).getX(), lst.get(1).getX(), lst.get(2).getX(), lst.get(3).getX(), lst.get(0).getY(), 45);
                } else {//vertical
                    figura = new FiguraL(lst.get(0).getX(), lst.get(0).getY(), lst.get(1).getY(), lst.get(2).getY(), lst.get(3).getY());
                }
                Thread hilo = new juego(tablero, figura, posicion, fig, m);
                hilo.start();
                break;
            case 2:
                if (this.posicion) {//horizontal
                    figura = new FiguraJ(lst.get(0).getX(), lst.get(1).getX(), lst.get(2).getX(), lst.get(3).getX(), lst.get(0).getY(), lst.get(1).getY(), 45);
                } else {//vertical
                    figura = new FiguraJ(lst.get(0).getX(), lst.get(1).getX(), lst.get(0).getY(), lst.get(1).getY(), lst.get(2).getY(), lst.get(3).getY());
                }
                Thread hilo2 = new juego(tablero, figura, posicion, fig, m);
                hilo2.start();
                break;
            case 3:
                if (this.posicion) {//horizontal
                    figura = new figul(lst.get(0).getX(), lst.get(1).getX(), lst.get(2).getX(), lst.get(3).getX(), lst.get(0).getY(), lst.get(1).getY(), 45);
                } else {//vertical
                    figura = new figul(lst.get(0).getX(), lst.get(3).getX(), lst.get(0).getY(), lst.get(1).getY(), lst.get(2).getY(), lst.get(3).getY());
                }
                Thread hilo3 = new juego(tablero, figura, posicion, fig, m);
                hilo3.start();
                break;
            case 4:
                if (this.posicion) {//horizontal
                    figura = new figuraO(lst.get(0).getX(), lst.get(2).getX(), lst.get(0).getY(), lst.get(2).getY());
                } else {//vertical
                    figura = new figuraO(lst.get(0).getX(), lst.get(2).getX(), lst.get(0).getY(), lst.get(2).getY());
                }
                Thread hilo4 = new juego(tablero, figura, posicion, fig, m);
                hilo4.start();
                break;
            case 5:
                if (this.posicion) {//horizontal
                    figura = new FiguraT(lst.get(0).getX(), lst.get(3).getX(), lst.get(0).getY(), lst.get(1).getY(), lst.get(2).getY());
                } else {//vertical
                    figura = new FiguraT(lst.get(0).getX(), lst.get(1).getX(), lst.get(3).getX(), lst.get(0).getY(), lst.get(1).getY(), 45);
                }
                Thread hilo5 = new juego(tablero, figura, posicion, fig, m);
                hilo5.start();
                break;
            case 6:
                if (this.posicion) {//horizontal
                    figura = new figuras(lst.get(0).getX(), lst.get(3).getX(), lst.get(0).getY(), lst.get(1).getY(), lst.get(2).getY());
                } else {//vertical
                    figura = new figuras(lst.get(0).getX(), lst.get(1).getX(), lst.get(3).getX(), lst.get(0).getY(), lst.get(1).getY(), 45);
                }
                Thread hilo6 = new juego(tablero, figura, posicion, fig, m);
                hilo6.start();
                break;
            case 7:
                if (this.posicion) {//horizontal
                    figura = new figuraz(lst.get(0).getX(), lst.get(2).getX(), lst.get(0).getY(), lst.get(1).getY(), lst.get(3).getY());
                } else {//vertical
                    figura = new figuraz(lst.get(0).getX(), lst.get(1).getX(), lst.get(3).getX(), lst.get(0).getY(), lst.get(1).getY(), 45);
                }
                Thread hilo7 = new juego(tablero, figura, posicion, fig, m);
                hilo7.start();
                break;
        }

    }

    private void reporteTokenNivel() throws IOException {
        PrintWriter sw = new PrintWriter(new FileWriter("Reporte_Token_Nivel.html"));
        sw.print("<HTML>");
        sw.println("<HEAD>");
        sw.println("</HEAD>");
        sw.println("<BODY>");
        sw.println("<Center><table border=\"2\"  border-collapse= \" collapse \" ></Center>");
        sw.println("<Center><TH COLSPAN = 5 > Tabla Tokens Nivel</TH></Center>");
        sw.println("<tr>");
        sw.println("<th > Numero </th> ");
        sw.println("<th> Lexema </th> ");
        sw.println("<th> Lexico </th> ");
        sw.println("<th> Fila </th> ");
        sw.println("<th> Columna </th> ");
        sw.println("</tr>");
        for (int i = 0; i < AnalizadorLVL.lst_token.size(); i++) {
            sw.println("<tr>");
            sw.println("<td>" + i + " </td> ");
            sw.println("<td> " + AnalizadorLVL.lst_token.get(i).lexema + " </td> ");
            sw.println("<td> " + AnalizadorLVL.lst_token.get(i).lexico + " </td> ");
            sw.println("<td> " + AnalizadorLVL.lst_token.get(i).Fila + " </td> ");
            sw.println("<td> " + AnalizadorLVL.lst_token.get(i).Columna + " </td> ");
            sw.println("</tr>");
        }
        sw.println("</table>");
        sw.println("</BODY>");
        sw.println("</HTML>");
        sw.close();
    }

    private void reporteTokenErrorNivel() throws IOException {
        PrintWriter sw = new PrintWriter(new FileWriter("ReporteError_Token_Nivel.html"));
        sw.print("<HTML>");
        sw.println("<HEAD>");
        sw.println("</HEAD>");
        sw.println("<BODY>");
        sw.println("<Center><table border=\"2\"  border-collapse= \" collapse \" ></Center>");
        sw.println("<Center><TH COLSPAN = 5 > Tabla Tokens Nivel</TH></Center>");
        sw.println("<tr>");
        sw.println("<th > Numero </th> ");
        sw.println("<th> Caracter </th> ");
        sw.println("<th> Descripcion </th> ");
        sw.println("<th> Fila </th> ");
        sw.println("<th> Columna </th> ");
        sw.println("</tr>");
        for (int i = 0; i < AnalizadorLVL.lst_error.size(); i++) {
            sw.println("<tr>");
            sw.println("<td>" + i + " </td> ");
            sw.println("<td> " + AnalizadorLVL.lst_error.get(i).Caracter + " </td> ");
            sw.println("<td> " + AnalizadorLVL.lst_error.get(i).Descripcion + " </td> ");
            sw.println("<td> " + AnalizadorLVL.lst_error.get(i).fila + " </td> ");
            sw.println("<td> " + AnalizadorLVL.lst_error.get(i).columna + " </td> ");
            sw.println("</tr>");
        }
        sw.println("</table>");
        sw.println("</BODY>");
        sw.println("</HTML>");
        sw.close();
    }

    private void reporteTokenPieza() throws IOException {
        PrintWriter sw = new PrintWriter(new FileWriter("Reporte_Token_Piezas.html"));
        sw.print("<HTML>");
        sw.println("<HEAD>");
        sw.println("</HEAD>");
        sw.println("<BODY>");
        sw.println("<Center><table border=\"2\"  border-collapse= \" collapse \" ></Center>");
        sw.println("<Center><TH COLSPAN = 5 > Tabla Tokens Piezas</TH></Center>");
        sw.println("<tr ALIGN=center>");
        sw.println("<th > Numero </th> ");
        sw.println("<th> Lexema </th> ");
        sw.println("<th> Lexico </th> ");
        sw.println("<th> Fila </th> ");
        sw.println("<th> Columna </th> ");
        sw.println("</tr>");
        for (int i = 0; i < AnalizadorPZS.lst_token.size(); i++) {
            sw.println("<tr ALIGN=center >");
            sw.println("<td>" + i + " </td> ");
            sw.println("<td> " + AnalizadorPZS.lst_token.get(i).lexema + " </td> ");
            sw.println("<td> " + AnalizadorPZS.lst_token.get(i).lexico + " </td> ");
            sw.println("<td> " + AnalizadorPZS.lst_token.get(i).Fila + " </td> ");
            sw.println("<td> " + AnalizadorPZS.lst_token.get(i).Columna + " </td> ");
            sw.println("</tr>");
        }
        sw.println("</table>");
        sw.println("</BODY>");
        sw.println("</HTML>");
        sw.close();
    }

    private void reporteTokenErrorPieza() throws IOException {
        PrintWriter sw = new PrintWriter(new FileWriter("ReporteError_Token_pieza.html"));
        sw.print("<HTML>");
        sw.println("<HEAD>");
        sw.println("</HEAD>");
        sw.println("<BODY>");
        sw.println("<Center><table border=\"2\"  border-collapse= \" collapse \" ></Center>");
        sw.println("<Center><TH COLSPAN = 5 > Tabla Tokens Nivel</TH></Center>");
        sw.println("<tr>");
        sw.println("<th > Numero </th> ");
        sw.println("<th> Caracter </th> ");
        sw.println("<th> Descripcion </th> ");
        sw.println("<th> Fila </th> ");
        sw.println("<th> Columna </th> ");
        sw.println("</tr>");
        for (int i = 0; i < AnalizadorPZS.lst_error.size(); i++) {
            sw.println("<tr>");
            sw.println("<td>" + i + " </td> ");
            sw.println("<td> " + AnalizadorPZS.lst_error.get(i).Caracter + " </td> ");
            sw.println("<td> " + AnalizadorPZS.lst_error.get(i).Descripcion + " </td> ");
            sw.println("<td> " + AnalizadorPZS.lst_error.get(i).fila + " </td> ");
            sw.println("<td> " + AnalizadorPZS.lst_error.get(i).columna + " </td> ");
            sw.println("</tr>");
        }
        sw.println("</table>");
        sw.println("</BODY>");
        sw.println("</HTML>");
        sw.close();
    }

    private void Figura_I(JLabel[][] figura) {
        int cont = 0;
        fig = 1;
        for (int i = 0; i < 1; i++) {
            for (int j = 0; j < 4; j++) {
                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
    }

    private void Figura_J(JLabel[][] figura) {
        int cont = 0;
        fig = 2;
        for (int i = 1; i < 2; i++) {
            for (int j = 0; j < 3; j++) {

                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
        for (int i = 0; i < 1; i++) {
            for (int j = 2; j < 3; j++) {
                if (l[i][j] == null) {
                    l[i][j] = new JLabel();
                    figura[i][j].setText(String.valueOf(++cont));
                    figura[i][j].setBorder(border);
                    figura[i][j].setOpaque(true);
                    figura[i][j].setBackground(Color.CYAN);
                    figura[i][j].setVisible(true);
                    figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                    PanelJuego.add(figura[i][j]);
                }
            }
        }
    }

    private void Figura_L(JLabel[][] figura) {
        int cont = 0;
        fig = 3;
        for (int i = 1; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
        for (int i = 2; i < 3; i++) {
            for (int j = 2; j < 3; j++) {
                if (l[i][j] == null) {
                    l[i][j] = new JLabel();
                    figura[i][j].setText(String.valueOf(++cont));
                    figura[i][j].setBorder(border);
                    figura[i][j].setOpaque(true);
                    figura[i][j].setBackground(Color.CYAN);
                    figura[i][j].setVisible(true);
                    figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                    PanelJuego.add(figura[i][j]);
                }
            }
        }
    }

    private void Figura_O(JLabel[][] figura) {
        int cont = 0;
        fig = 4;
        for (int i = 1; i < 3; i++) {
            for (int j = 0; j < 2; j++) {
                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
    }

    private void Figura_T(JLabel[][] figura) {
        int cont = 0;
        fig = 5;
        for (int i = 1; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
        for (int i = 0; i < 3; i++) {
            for (int j = 1; j < 2; j++) {
                if (l[i][j] == null) {
                    l[i][j] = new JLabel();
                    figura[i][j].setText(String.valueOf(++cont));
                    figura[i][j].setBorder(border);
                    figura[i][j].setOpaque(true);
                    figura[i][j].setBackground(Color.CYAN);
                    figura[i][j].setVisible(true);
                    figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                    PanelJuego.add(figura[i][j]);
                }
            }
        }
    }

    private void Figura_s(JLabel[][] figura) {
        int cont = 0;
        fig = 6;
        for (int i = 2; i < 4; i++) {
            for (int j = 0; j < 1; j++) {
                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
        for (int i = 1; i < 3; i++) {
            for (int j = 1; j < 2; j++) {
                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
    }

    private void Figura_z(JLabel[][] figura) {
        int cont = 0;
        fig = 7;
        for (int i = 1; i < 3; i++) {
            for (int j = 0; j < 1; j++) {
                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
        for (int i = 2; i < 4; i++) {
            for (int j = 1; j < 2; j++) {
                l[i][j] = new JLabel();
                figura[i][j].setText(String.valueOf(++cont));
                figura[i][j].setBorder(border);
                figura[i][j].setOpaque(true);
                figura[i][j].setBackground(Color.CYAN);
                figura[i][j].setVisible(true);
                figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                PanelJuego.add(figura[i][j]);
            }
        }
    }

    private JLabel[][] rotar(JLabel[][] figura) {
        JLabel[][] nueva = new JLabel[4][4];
        for (int i = 0, j = 3; i < 4 && j >= 0; i++, j--) {
            for (int k = 0; k < 4; k++) {
                nueva[i][k] = figura[k][j];
            }
        }
        return nueva;
    }

    private void moverD(JLabel[][] figura) {
        for (int i = 0; i < 4; i++) {
            if (figura[i] != null) {
                for (int j = 0; j < 4; j++) {
                    if (figura[i][j] != null) {
                        figura[i][j].setBounds(new Rectangle(figura[i][j].getBounds().x + 20, j * 20, 20, 20));
                    }
                }
            }
        }
    }

    private void moverI(JLabel[][] figura) {
        for (int i = 0; i < 4; i++) {
            if (figura[i] != null) {
                for (int j = 0; j < 4; j++) {
                    if (figura[i][j] != null) {
                        figura[i][j].setBounds(new Rectangle(figura[i][j].getBounds().x - 20, j * 20, 20, 20));
                    }
                }
            }
        }
    }

    private void mostrar(JLabel[][] figura) {
        for (int i = 0; i < 4; i++) {
            if (figura[i] != null) {
                for (int j = 0; j < 4; j++) {
                    if (figura[i][j] != null) {
                        figura[i][j].setOpaque(true);
                        figura[i][j].setBounds(new Rectangle(i * 20, j * 20, 20, 20));
                        figura[i][j].setVisible(true);
                        PanelJuego.add(figura[i][j]);
                    }
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelJuego;
    private javax.swing.JTextArea TextNiveles;
    private javax.swing.JTextArea TextPiezas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
